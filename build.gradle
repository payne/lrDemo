apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'rebel'
apply plugin: "groovy"

//apply from: 'https://github.com/kensipe/gradle-samples/raw/master/jbehave.gradle'

group = 'me.roessing.lrdemo'
version = '1.0-SNAPSHOT'

configurations.compile.transitive = true

sourceCompatibility = 1.6
targetCompatibility = 1.6

def timestamp = new Date().format('yyyyMMdd-HHmm')


// ------- START dependencies for gradle itself -----------
buildscript {
    //load the cucumber gradle integration.
    // run it with the task : "> gradle cucumber"
    //there's also some task configuration below...
    apply from: 'https://github.com/samueltbrown/gradle-cucumber-plugin/raw/master/repo/gradle-cucumber-plugin/gradle-cucumber-plugin/0.2/cucumberinit.gradle'



    repositories {
        mavenLocal()
        mavenCentral()
        mavenRepo(name: 'zt-public-snapshots',
                url: 'http://repos.zeroturnaround.com/nexus/content/groups/zt-public/')
    }
    dependencies {
        classpath group: 'org.zeroturnaround', name: 'gradle-jrebel-plugin', version: '1.0.2-SNAPSHOT'
    }
}

// ------- END dependencies for gradle itself -----------

repositories {
    //mavenRepo name:'Local', url: "file://" + System.properties['user.home'] + "/.m2/repository"
    //mavenRepo artifactUrls: ["http://repo.maven.apache.org/maven2"]
    mavenRepo url: "http://repo.maven.apache.org/maven2"
    mavenCentral()
    mavenLocal()
}


uploadArchives {
    repositories.mavenDeployer {
        repository(url: "file://" + System.properties['user.home'] + "/.m2/repository")
        // mavenLocal()
    }
}


dependencies {
    def gebVersion = "0.9.0"
    def seleniumVersion = "2.26.0"
    def springVersion = "3.2.0.RELEASE"
    def junitVersion = "4.8.2"
    def groovyVersion = "1.8.6"
    def spockVersion = "0.7-groovy-1.8"

    providedCompile "javax.servlet.jsp:jsp-api:2.1"
    compile "javax.servlet:jstl:1.2"
    compile "javax.servlet:servlet-api:2.5"

    compile "org.springframework:spring-core:$springVersion"
    compile "org.springframework:spring-web:$springVersion"
    compile "org.springframework:spring-webmvc:$springVersion"
    compile "org.codehaus.jackson:jackson-mapper-asl:1.9.10"

    testCompile "org.springframework:spring-test:$springVersion"
    testCompile "junit:junit:$junitVersion"
    // If using JUnit, need to depend on geb-junit (3 or 4)
    testCompile "org.gebish:geb-junit4:$gebVersion"
    testCompile "junit:junit-dep:$junitVersion"
    //spock dependencies

    groovy "org.codehaus.groovy:groovy-all:$groovyVersion"

    // If using Spock, need to depend on geb-spock
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile "org.spockframework:spock-core:$spockVersion"
    // Need a web driver implementation
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testRuntime "org.seleniumhq.selenium:selenium-support:$seleniumVersion"


}
//make rebel.xml part of default build.
processResources.dependsOn(generateRebel, generateLiveRebel)


test{
    systemProperties "geb.build.reportsDir":"$reportsDir/geb"
}

rebel {
    alwaysGenerate = true
    showGenerated = true
    rebelXmlDirectory = "build/classes"
    warSourceDirectory = "src/main/webapp"
    version = version + '-' + timestamp
}

war {
    classifier = timestamp
}


task replacePoms(dependsOn: install) << {
    def pomsDir = new File(project.buildDir, "poms")
    def defaultPomName = "pom-default.xml"
    def defaultPom = new File(pomsDir, defaultPomName)
    if (defaultPom.exists()) {
        File pomFile = new File(project.projectDir, "pom.xml")
        if (pomFile.exists()) {
            pomFile.renameTo(new File(project.projectDir, "pom.xml.bak"))
        }
        project.copy {
            from(pomsDir) {
                include defaultPomName
                rename defaultPomName, 'pom.xml'
            }
            into(project.projectDir)
        }
    }

cucumber {
    formats = ['pretty','json:build/cucumber.json','junit:build/cucumber.xml']
    //default for glueDirs is src/test/java
    // glueDirs = ['src/test/resources/env', 'src/test/resources/support', 'src/test/resources/step_definitions']
    featureDirs = ['src/test/resources/features']
    monochrome = false
    strict = false
    dryRun = false
}

}
